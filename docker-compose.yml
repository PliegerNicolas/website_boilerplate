services:

  nginx:
    container_name: nginx
    image: nginx
    build:
      context: ./srcs/nginx
      args:
        - DOMAIN_NAME=${DOMAIN_NAME}
        - FRONTEND_PORT=${VUEJS_PORT}
        - BACKEND_PORT=${NESTJS_PORT}
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME}
      - FRONTEND_PORT=${VUEJS_PORT}
      - BACKEND_PORT=${NESTJS_PORT}
    restart: unless-stopped
    networks:
      - network
    ports:
      - "80:80"
      - "443:443"
#      - "8080:80"
#      - "4433:443"
    depends_on:
      - vuejs

  vuejs:
    container_name: vuejs
    image: vuejs
    build:
      context: ./srcs/vuejs
      args:
        - PORT=${VUEJS_PORT}
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=${VUEJS_PORT}
    restart: unless-stopped
    networks:
      - network
    depends_on:
      - nestjs

  nestjs:
    container_name: nestjs
    image: nestjs
    build:
      context: ./srcs/nestjs
      args:
      - NODE_ENV=${NODE_ENV}
      - DOMAIN_NAME=${DOMAIN_NAME}
      - PORT=${NESTJS_PORT}
      - FRONTEND_PORT=${VUEJS_PORT}
      - DB_NESTJS_PORT=${DB_NESTJS_PORT}
      - POSTGRES_NESTJS_DB=${POSTGRES_NESTJS_DB}
      - POSTGRES_NESTJS_USER=${POSTGRES_NESTJS_USER}
      - POSTGRES_NESTJS_PASSWORD=${POSTGRES_NESTJS_PASSWORD}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_USER=${REDIS_USER}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    environment:
      - NODE_ENV=${NODE_ENV}
      - DOMAIN_NAME=${DOMAIN_NAME}
      - PORT=${NESTJS_PORT}
      - FRONTEND_PORT=${VUEJS_PORT}
      - DB_NESTJS_PORT=${DB_NESTJS_PORT}
      - POSTGRES_NESTJS_DB=${POSTGRES_NESTJS_DB}
      - POSTGRES_NESTJS_USER=${POSTGRES_NESTJS_USER}
      - POSTGRES_NESTJS_PASSWORD=${POSTGRES_NESTJS_PASSWORD}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_USER=${REDIS_USER}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    restart: unless-stopped
    networks:
      - network
    depends_on:
      - postgres_nestjs
      - redis

  postgres_nestjs:
    container_name: postgres_nestjs
    image: postgres
    build:
      context: ./srcs/postgres
      args:
        - WHITELISTED_CONTAINER_NAME='nestjs'
        - PORT=${DB_NESTJS_PORT}
        - POSTGRES_DB=${POSTGRES_NESTJS_DB}
        - POSTGRES_USER=${POSTGRES_NESTJS_USER}
        - POSTGRES_PASSWORD=${POSTGRES_NESTJS_PASSWORD}
    environment:
      - PORT=${DB_NESTJS_PORT}
      - POSTGRES_DB=${POSTGRES_NESTJS_DB}
      - POSTGRES_USER=${POSTGRES_NESTJS_USER}
      - POSTGRES_PASSWORD=${POSTGRES_NESTJS_PASSWORD}
    restart: unless-stopped
    networks:
      - network
    #volumes:
    #  - postgres_nestjs_data:/var/lib/postgresql/data

  redis:
    container_name: redis
    image: redis
    build:
      context: ./srcs/redis
      args:
        - PORT=${REDIS_PORT}
        - REDIS_USER=${REDIS_USER}
        - REDIS_PASSWORD=${REDIS_PASSWORD}
    environment:
      - PORT=${REDIS_PORT}
      - REDIS_USER=${REDIS_USER}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    restart: unless-stopped
    networks:
      - network
    #volumes:
    #  - redis_data:/var/lib/redis

networks:
  network:
    name: network
    driver: bridge

volumes:
  postgres_nestjs_data:
    driver: local
    driver_opts:
      type: none
      device: ./data/postgresql/nestjs
      o: bind
  redis_data:
    driver: local
    driver_opts:
      type: none
      device: ./data/redis
      o: bind
